name: workflow_api_fix
on:
  push:
    branches:
      - "bugfix/*"
 
jobs:
  run:
    runs-on: ubuntu-latest
    steps:
      - name: Descargar repositorio git
        id: checkout_repository
        uses: actions/checkout@v4

      - name: Validar ultimo mensaje commit
        id: validate_last_msg_commit
        run: |
          last_msg_commit=`git log --format=%B -n 1 HEAD | head -n 1`
          if [[ $last_msg_commit == '${{ vars.LAST_MSG_COMMIT }}' ]]; then
            result="TRUE"
          else
            result="FALSE"
          fi
          echo "is_valid=$result" >> $GITHUB_OUTPUT

      - name: Obtener nombre de repo
        id: get_repo_name
        if: ${{ steps.validate_last_msg_commit.outputs.is_valid == 'TRUE' }}
        run: |
          gitRepoName=`git ls-remote --get-url | xargs basename -s .git`
          echo "GIT_REPO_NAME=$gitRepoName" >> $GITHUB_OUTPUT

      - name: Obtener tipo de API
        id: get_api_type
        if: ${{ steps.get_repo_name.outputs.GIT_REPO_NAME != '' }}
        run: |
          gitRepoName=${{ steps.get_repo_name.outputs.GIT_REPO_NAME }}
          apiType=`yq '.x-bcp-api-type' api/$gitRepoName.yaml`
          echo "api_type=$apiType" >> $GITHUB_OUTPUT

      - name: Validar tipo de API
        id: validate_api_type
        if: ${{ steps.get_api_type.outputs.api_type != '' }}
        run: |
          apiType=${{ steps.get_api_type.outputs.api_type }}
          echo "apiType output: $apiType"
          
          IFS=',' read -r -a api_types <<< ${{ vars.VALID_API_TYPES }}
          for type in "${api_types[@]}"; do
            echo $type
            if [[ $apiType == "$type" ]]; then
              result="TRUE"
              echo "es valido"
              break
            else
              echo "no es valido"
            fi
          done
          echo "is_valid=$result" >> $GITHUB_OUTPUT
      
      - name: Obtener ultimo tag
        uses: actions-ecosystem/action-get-latest-tag@v1
        id: get_latest_tag
        if: ${{ steps.validate_api_type.outputs.is_valid == 'TRUE' }}
        with:
          semver_only: true
          initial_version: false

      - name: Validar tag
        uses: actions-ecosystem/action-regex-match@v2
        id: regex_match
        if: ${{ steps.get_latest_tag.outputs.tag != '' }}
        with:
          text: ${{ steps.get_latest_tag.outputs.tag }}
          regex: '^v(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)$'

      - name: Instalar lib my-openapi-changes
        id: install_openapi_changes
        if: ${{ steps.regex_match.outputs.match != '' }}
        run: |
          echo "2. Si es una actualizacion de API, se instala libreria para validar tipo de actualizacion en el OpenAPI"
          curl -fsSL https://raw.githubusercontent.com/devniel93/my-openapi-changes/main/install.sh | sh

      - name: Validar si es FIX
        id: validate_is_fix
        if: ${{ steps.get_repo_name.outputs.GIT_REPO_NAME != '' }}
        run: |
          gitRepoName=${{ steps.get_repo_name.outputs.GIT_REPO_NAME }}
          jsonReport=`openapi-changes report --no-color api/$gitRepoName.yaml https://raw.githubusercontent.com/devniel93/$gitRepoName/main/api/$gitRepoName.yaml`
          echo $jsonReport
          
          validJson=`echo $jsonReport | jq -r '.message'`
          if [[ $validJson == '${{ vars.MSG_RESULT_PREFIX }}'* ]]; then
            echo "No existen cambios"
          else
            echo "Existen cambios..."

            IFS=',' read -r -a changes_properties <<< ${{ vars.OPENAPI_CHANGES_PROPERTIES }}
            for change in "${changes_properties[@]}"; do
              echo "2.1 validando si hay cambios en $change"
              validFix=`echo $jsonReport | jq -r '.changes[] | select(.property=="'$change'")'`
              echo $validFix

              if [[ -z "${validFix// /}" ]] || [[ $validFix == 'null' ]] ; then
                echo "No hay cambios en $change"
                result="TRUE"
              else
                echo "Hay cambios en $change"
                result="FALSE"
                break
              fi
            done

            echo "is_fix=$result" >> $GITHUB_OUTPUT
            echo "is_fix: $result"

          fi

      - name: Generar PR y merge
        id: generate_pr
        if: ${{ steps.validate_is_fix.outputs.is_fix == 'TRUE' }}
        run: |
          gh pr create --title 'Merge testing' --body 'Created by Github action'
          gh pr merge --merge
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Obtener nueva version
        uses: actions-ecosystem/action-bump-semver@v1
        id: get_new_version
        if: ${{ steps.generate_pr.outcome == 'success' }}
        with:
          current_version: ${{ steps.get_latest_tag.outputs.tag }}
          level: 'patch'
      
      - name: Generar TAG
        uses: actions-ecosystem/action-push-tag@v1
        id: generate_tag
        if: ${{ steps.get_new_version.outputs.new_version != null }}
        with:
          tag: ${{ steps.get_new_version.outputs.new_version }}
          message: "${{ steps.get_new_version.outputs.new_version }}: PR"