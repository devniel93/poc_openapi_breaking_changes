name: workflow_api_fix
on:
  #pull_request:
  push:
    branches:
      - "bugfix/*"
 
jobs:
  run:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        id: checkout_repository
        uses: actions/checkout@v4

      - name: Validar ultimo mensaje commit
        id: validate_last_msg_commit
        run: |
          last_msg_commit=`git log --format=%B -n 1 HEAD | head -n 1`
          echo "last msg: $last_msg_commit"
          
          if [[ $last_msg_commit == '${{ vars.OPENAPI_CHANGES_PROPERTIES }}' ]]; then
            echo "Mensaje para gatillar ejecucion de github action"
          else
            echo "No se ejecuta github action"
          fi

      - name: Obtener ultimo tag
        uses: actions-ecosystem/action-get-latest-tag@v1
        id: get_latest_tag
        if: ${{ steps.validate_last_msg_commit.outputs.is_valid == 'TRUE' }}
        with:
          semver_only: true
          initial_version: false

      - name: Validar tag
        uses: actions-ecosystem/action-regex-match@v2
        id: regex_match
        if: ${{ steps.get_latest_tag.outputs.tag != '' }}
        with:
          text: ${{ steps.get_latest_tag.outputs.tag }}
          regex: '^v(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)$'

      - name: Instalar lib my-openapi-changes
        id: install_openapi_changes
        if: ${{ steps.regex_match.outputs.match != '' }}
        run: |
          echo "2. Si es una actualizacion de API, se instala libreria para validar tipo de actualizacion en el OpenAPI"
          curl -fsSL https://raw.githubusercontent.com/devniel93/my-openapi-changes/main/install.sh | sh

      - name: Obtener nombre de repo
        id: get_repo_name
        if: ${{ steps.regex_match.outputs.match != '' }}
        run: |
          gitRepoName=`git ls-remote --get-url | xargs basename -s .git`
          echo "GIT_REPO_NAME=$gitRepoName" >> $GITHUB_OUTPUT

      - name: Validar si es FIX
        id: is_fix
        if: ${{ steps.regex_match.outputs.match != '' }}
        run: |
          gitRepoName=${{ steps.get_repo_name.outputs.GIT_REPO_NAME }}
          jsonReport=`openapi-changes report --no-color api/$gitRepoName.yaml https://raw.githubusercontent.com/devniel93/$gitRepoName/main/api/$gitRepoName.yaml`
          echo $jsonReport
          echo "IS_FIX_DESIGN='FALSE'" >> $GITHUB_OUTPUT

          validJson=`echo $jsonReport | jq -r '.message'`
          prefix=${{ vars.MSG_RESULT_PREFIX }}
          
          if [[ $validJson == "$prefix"* ]]; then
            echo "No existen cambios"
          else
            echo "Existen cambios..."

            echo "2.0 validando si hay cambios en paths o endpoints"
            validFix=`echo $jsonReport | jq -r '.reportSummary.paths'`
            echo "2.0: $validFix"
            
            if [[ -z "${validFix// /}" ]] || [[ $validFix == 'null' ]] ; then
              echo "No hay cambios en paths o endpoints."
            
              IFS=',' read -r -a elementos <<< ${{ vars.OPENAPI_CHANGES_PROPERTIES }}
              for elemento in "${elementos[@]}"; do
                  echo "2.1 validando si hay cambios en $elemento"
                  validFix=`echo $jsonReport | jq -r '.changes[] | select(.property=="'$elemento'")'`
                  echo "2.1: $validFix"

                  if [[ -z "${validFix// /}" ]] || [[ $validFix == 'null' ]] ; then
                     echo "No hay cambios en $elemento"
                     result="TRUE"
                  else
                    echo "Hay cambios en $elemento"
                    result="FALSE"
                    break
                  fi
                  echo "IS_FIX_DESIGN=$result" >> $GITHUB_OUTPUT

              done
              
            else
              echo "Hay cambios en paths o endpoints."
            fi

          fi

      - name: Generar PR
        id: generate_pr
        if: ${{ steps.is_fix.outputs.IS_FIX_DESIGN == 'TRUE' }}
        run: |
          gh pr create --title 'Merge testing' --body 'Created by Github action'
          gh pr merge --merge
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Obtener nueva version
        uses: actions-ecosystem/action-bump-semver@v1
        id: get_new_version
        if: ${{ steps.generate_pr.outcome == 'success' }}
        with:
          current_version: ${{ steps.get_latest_tag.outputs.tag }}
          level: 'patch'
      
      - name: Generar TAG
        uses: actions-ecosystem/action-push-tag@v1
        id: generate_tag
        if: ${{ steps.get_new_version.outputs.new_version != null }}
        with:
          tag: ${{ steps.get_new_version.outputs.new_version }}
          message: "${{ steps.get_new_version.outputs.new_version }}: PR"