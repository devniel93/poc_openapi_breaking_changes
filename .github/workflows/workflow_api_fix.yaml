name: workflow_api_fix
on:
  #pull_request:
  push:
    branches:
      - "bugfix/*"
 
jobs:
  run:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        id: checkout_repository
        uses: actions/checkout@v4

      - name: Validar si es nueva API
        id: new_api
        run: |
          echo "1. Validando si es nueva API."
          resu=`git ls-remote origin --quiet v\*`
          if [[ -z "${resu// /}" ]]; then
            echo "TRUE"
          else 
            echo "FALSE"
          fi

      - name: Instalar lib my-openapi-changes
        id: install_openapi_changes
        run: |
          curl -fsSL https://raw.githubusercontent.com/devniel93/my-openapi-changes/main/install.sh | sh

      - name: Obtener nombre de repo
        id: get_repo_name
        run: |
          gitRepoName=`git ls-remote --get-url | xargs basename -s .git`
          echo "GIT_REPO_NAME=$gitRepoName" >> $GITHUB_OUTPUT

      - name: Validar si existen cambios
        id: validate_for_changes
        run: |
          gitRepoName=${{ steps.get_repo_name.outputs.GIT_REPO_NAME }}
          jsonReport=`openapi-changes report --no-color api/$gitRepoName.yaml https://raw.githubusercontent.com/devniel93/poc_openapi_breaking_changes/main/api/$gitRepoName.yaml`
          echo $jsonReport

          validJson=`echo $jsonReport | jq -r '.message'`
          prefix="No changes"
          result=""
          if [[ $validJson == "$prefix"* ]]; then
            echo "No existen cambios"
            echo "exit"
          else
            echo "Existen cambios..."

            echo "2.0 validando si hay cambios en paths o endpoints"
            validFix=`echo $jsonReport | jq -r '.reportSummary.paths'`
            echo "2.0: $validFix"
            
            if [[ -z "${validFix// /}" ]] || [[ $validFix == 'null' ]] ; then
              echo "No hay cambios en paths o endpoints."

              echo "REPORTE: $jsonReport"

              IFS=',' read -r -a elementos <<< ${{ vars.OPENAPI_CHANGES_PROPERTIES }}
              for elemento in "${elementos[@]}"; do
                  echo "$elemento"
                  echo "2.1 validando si hay cambios en $elemento"
                  validFix=`echo $jsonReport | jq -r '.changes[] | select(.property=='$elemento')'`
                  echo "2.1: $validFix"
                  if [[ -z "${validFix// /}" ]] || [[ $validFix == 'null' ]] ; then
                     echo "No hay cambios en $elemento"
                  else
                    echo "Hay cambios en $elemento"
                    echo "exit" 
                  fi

              done
              
            else
              echo "Hay cambios en paths o endpoints."
              echo "exit"
            fi

          fi
