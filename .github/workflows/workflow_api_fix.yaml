name: workflow_api_fix
on:
  push:
    branches:
      - "bugfix/*"
 
jobs:
  run:
    runs-on: ubuntu-latest
    steps:
      - name: Descargar repositorio git
        id: checkout_repository
        uses: actions/checkout@v4

      - name: Instalar lib my-openapi-changes
        id: install_openapi_changes
        if: ${{ steps.regex_match.outputs.match != '' }}
        run: |
          echo "2. Si es una actualizacion de API, se instala libreria para validar tipo de actualizacion en el OpenAPI"
          curl -fsSL https://raw.githubusercontent.com/devniel93/my-openapi-changes/main/install.sh | sh

      - name: Validar si es FIX
        id: validate_is_fix
        if: ${{ steps.install_openapi_changes.outcome == 'success' }}
        run: |
          gitRepoName=${{ steps.get_repo_name.outputs.GIT_REPO_NAME }}
          jsonReport=`openapi-changes report --no-color api/$gitRepoName.yaml https://raw.githubusercontent.com/devniel93/$gitRepoName/main/api/$gitRepoName.yaml`
          echo $jsonReport
          
          validJson=`echo $jsonReport | jq -r '.message'`
          if [[ $validJson == '${{ vars.MSG_RESULT_PREFIX }}'* ]]; then
            echo "No existen cambios"
          else
            echo "Existen cambios..."

            IFS=',' read -r -a changes_properties <<< ${{ vars.OPENAPI_CHANGES_PROPERTIES }}
            for change in "${changes_properties[@]}"; do
              echo "2.1 validando si hay cambios en $change"
              validFix=`echo $jsonReport | jq -r '.changes[] | select(.property=="'$change'")'`
              echo $validFix

              if [[ -z "${validFix// /}" ]] || [[ $validFix == 'null' ]] ; then
                echo "No hay cambios en $change"
                result="TRUE"
              else
                echo "Hay cambios en $change"
                result="FALSE"
                break
              fi
            done

            echo "is_fix=$result" >> $GITHUB_OUTPUT
            echo "is_fix: $result"

          fi